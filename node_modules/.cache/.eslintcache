[{"/Users/solomonlian/Desktop/CSE312/Project/FILO/src/index.js":"1","/Users/solomonlian/Desktop/CSE312/Project/FILO/src/App.jsx":"2","/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/Home.jsx":"3","/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/Nav.jsx":"4","/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/Sidebar.jsx":"5","/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/Register.jsx":"6","/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/Messages.jsx":"7","/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/Posts.jsx":"8","/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/UserContext.js":"9"},{"size":488,"mtime":1699409291301,"results":"10","hashOfConfig":"11"},{"size":1298,"mtime":1699421171413,"results":"12","hashOfConfig":"11"},{"size":4418,"mtime":1699411393333,"results":"13","hashOfConfig":"11"},{"size":8995,"mtime":1699421067788,"results":"14","hashOfConfig":"11"},{"size":11856,"mtime":1699421081787,"results":"15","hashOfConfig":"11"},{"size":7391,"mtime":1699409291301,"results":"16","hashOfConfig":"11"},{"size":2126,"mtime":1699420618778,"results":"17","hashOfConfig":"11"},{"size":5292,"mtime":1699418239086,"results":"18","hashOfConfig":"11"},{"size":1031,"mtime":1699420407470,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"biwf2h",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/solomonlian/Desktop/CSE312/Project/FILO/src/index.js",[],[],"/Users/solomonlian/Desktop/CSE312/Project/FILO/src/App.jsx",[],[],"/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/Home.jsx",["52"],[],"import React, { useRef, useEffect, useState } from \"react\";\nimport Posts from \"./Posts\";\nimport SendIcon from \"../assets/sendIcon.svg\";\nimport { LuImagePlus } from \"react-icons/lu\";\n\nconst Home = () => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [showDescription, setShowDescription] = useState(false);\n  const [formData, setFormData] = useState({\n    new_title: \"\",\n    new_description: \"\",\n  });\n  const formRef = useRef();\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (formRef.current && !formRef.current.contains(event.target)) {\n        setShowDescription(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [formRef]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleNewPost = async (event) => {\n    event.preventDefault();\n\n    const dataToSend = {\n      title: formData.new_title,\n      description: formData.new_description,\n    };\n\n    try {\n      console.log(\"dataToSend: \");\n      console.log(dataToSend);\n      const response = await fetch(\"/posts-upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(dataToSend),\n      });\n\n      if (response.ok) {\n        window.location.href = \"/\";\n      } else {\n        // handle error\n      }\n    } catch (error) {\n      window.location.href = \"/\";\n      console.error(\"Error:\", error);\n    }\n  };\n  // TODO: Update Posts to load images look at the way profile images are uploaded should be similar\n\n  return (\n    <div className=\"home_bg min-h-screen h-full ml-20\">\n      <div className=\"flex justify-center items-center text-3xl text-white pt-2\">\n        <a\n          href=\"/\"\n          className=\"px-4 text-base hover:underline underline-offset-8\"\n        >\n          Home\n        </a>\n        |\n        <a\n          href=\"/\"\n          className=\"px-4 text-base hover:underline underline-offset-8\"\n        >\n          Following\n        </a>\n      </div>\n\n      <div\n        className=\"max-w-5xl mx-auto p-4 my-8 bg-primaryDark shadow-md rounded-md text-sand\"\n        ref={formRef}\n      >\n        <h1 className=\"text-base font-semibold mb-2 text-center\">New Post</h1>\n        <form onSubmit={handleNewPost}>\n          <input\n            name=\"new_title\"\n            className=\"bg-transparent border-none appearance-none leading-tight focus:outline-none w-full\"\n            placeholder=\"What's On Your Mind?\"\n            value={formData.new_title}\n            onFocus={() => {\n              setIsFocused(true);\n              setShowDescription(true);\n            }}\n            onBlur={() => setIsFocused(false)}\n            onChange={handleInputChange}\n          />\n          <hr />\n          {showDescription && (\n            <div className=\"mt-2\">\n              <textarea\n                name=\"new_description\"\n                className=\"bg-transparent border-none appearance-none leading-tight focus:outline-none w-full h-20 resize-none overflow-auto\"\n                placeholder=\"Description\"\n                value={formData.new_description}\n                onFocus={() => {\n                  setIsFocused(true);\n                  setShowDescription(true);\n                }}\n                onChange={handleInputChange}\n              />\n              <hr className=\"p-2\" />\n\n              <div className=\"flex justify-end items-center\">\n                <label className=\"cursor-pointer\">\n                  <LuImagePlus \n                  className=\"w-5 h-5 inline-block text-white mr-2 hover:scale-150\"\n                  />\n                  <input\n                    type=\"file\"\n                    className=\"hidden\"\n                    // onChange={handleFileChange}\n                    accept=\"image/*\"\n                  />\n                </label>\n                <button\n                  type=\"submit\"\n                  className=\"bg-none hover:scale-150 text-white font-semibold mx-4 rounded-md justify-between\"\n                >\n                  <img src={SendIcon} alt=\"send\" width={20} height={20} />\n                </button>\n\n              </div>\n            </div>\n          )}\n        </form>\n      </div>\n\n      <Posts />\n    </div>\n  );\n};\n\nexport default Home;\n","/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/Nav.jsx",["53","54"],[],"import React, { useState, useEffect, useRef, useContext } from \"react\";\nimport Logo from \"../assets/FILO_Logo.png\";\nimport DefaultProfileImage from \"../assets/mainProfile.svg\"; // The default profile image\n\n// import UserContext from './UserContext';\n\n\nconst Nav = () => {\n  const [user, setUser] = useState(null);\n  const [isProfileMenuOpen, setProfileMenuOpen] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const profileMenuRef = useRef(null);\n  const modalRef = useRef(null);\n\n  useEffect(() => {\n    fetch(\"/get-user\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok \" + response.statusText);\n        }\n        return response.json();\n      })\n      .then((userData) => {\n        console.log(userData.profile_path);\n        setUser(userData);\n      })\n      .catch((error) => {\n        console.error(\n          \"There has been a problem with your fetch operation:\",\n          error\n        );\n      });\n  }, []);\n\n\n  const handleMenu = () => {\n    setProfileMenuOpen(false);\n  };\n\n  useEffect(() => {\n    const handleDocumentClick = (e) => {\n      // Close profile menu if click is outside\n      if (\n        profileMenuRef.current &&\n        !profileMenuRef.current.contains(e.target)\n      ) {\n        setProfileMenuOpen(false);\n      }\n      // Close modal if click is outside\n      if (\n        isModalOpen &&\n        modalRef.current &&\n        !modalRef.current.contains(e.target)\n      ) {\n        setIsModalOpen(false);\n      }\n    };\n\n    // Add event listener when the component is mounted\n    document.addEventListener(\"mousedown\", handleDocumentClick);\n\n    // Cleanup the event listener when the component is unmounted\n    return () => {\n      document.removeEventListener(\"mousedown\", handleDocumentClick);\n    };\n  }, [isModalOpen]);\n\n  const handleProfileIconClick = () => {\n    setProfileMenuOpen(!isProfileMenuOpen);\n  };\n\n  const handleProfileClick = () => {\n    setIsModalOpen(true);\n    setProfileMenuOpen(false); // Close dropdown menu\n  };\n\n  return (\n    // TODO: Implement search bar\n    <header>\n      <nav className=\"nav_bg flex justify-between items-center w-full z-10 py-4 px-10 shadow-lg\">\n        <a href=\"/\">\n          <img src={Logo} alt=\"logo\" width={35} height={25} />\n        </a>\n        <div className=\"flex gap-6 px-4\">\n          <h1 className=\"text-sand text-2xl font-bold\">\n            {user ? user.username : \"Loading...\"}\n          </h1>\n          <div ref={profileMenuRef}>\n            {user && user.profile_image && (\n              <img\n                src={require(`../assets/${user.profile_image}`)}\n                alt=\"profile\"\n                width={35}\n                height={35}\n                onClick={handleProfileIconClick}\n                className=\"cursor-pointer rounded-full\"\n              />\n            )}\n            {isProfileMenuOpen && (\n              <div className=\"absolute top-16 right-6 bg-primaryBlue text-sand shadow-md p-2 border-2 border-sand rounded-md\">\n                <ul className=\"text-center\">\n                  <li\n                    className=\"hover:scale-110 hover:underline cursor-pointer\"\n                    onClick={handleProfileClick}\n                  >\n                    Profile\n                  </li>\n                  <li\n                    className=\"hover:scale-110 hover:underline cursor-pointer\"\n                    onClick={handleMenu}\n                  >\n                    Settings\n                  </li>\n                  <li\n                    className=\"hover:scale-110 hover:underline cursor-pointer\"\n                    onClick={handleMenu}\n                  >\n                    Logout\n                  </li>\n                </ul>\n              </div>\n            )}\n          </div>\n        </div>\n      </nav>\n      {isModalOpen && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-40 flex justify-center items-center \">\n          <div\n            ref={modalRef}\n            className=\"nav_bg p-4 rounded text-white \"\n            style={{ minHeight: \"40vh\", minWidth: \"80vh\" }}\n          >\n            <h2 className=\"text-amber-500 pb-10 text-center text-3xl\t\">\n              User Profile\n            </h2>\n            <div className=\"flex flex-wrap\">\n              <div className=\"flex flex-col items-center w-1/2 border-r\">\n                {/* Image Container */}\n                <div className=\"w-full flex justify-center p-10\">\n                  <div className=\"relative\">\n                    {user && user.profile_image && (\n                      <img\n                        src={require(`../assets/${user.profile_image}`)}\n                        alt=\"profile\"\n                        className=\"w-52 h-auto cursor-pointer rounded-full\"\n                      />\n                    )}\n                    {/* Upload Icon Overlay */}\n                    <input\n                      type=\"file\"\n                      id=\"profile-upload\"\n                      className=\"hidden\"\n                      // onChange={} // A function to handle the file upload\n                    />\n                    {/* Upload Icon Overlay */}\n                    <label\n                      htmlFor=\"profile-upload\"\n                      className=\"absolute bottom-2 right-3 bg-blue-300 text-white rounded-full \n                            flex items-center justify-center w-10 h-10 cursor-pointer\"\n                    >\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                        className=\"w-6 h-6\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth=\"2\"\n                          d=\"M12 4v16m8-8H4\"\n                        />\n                      </svg>\n                    </label>\n                  </div>\n                </div>\n\n                {/* Information Container */}\n                <div className=\"w-full flex justify-between px-2 text-2xl pb-10\">\n                  <div className=\"flex-1 flex justify-center items-center border-r\">\n                    <div className=\"text-center\">\n                      <div className=\"font-semibold\">Following</div>\n                      <div>\n                        {user && Array.isArray(user.following)\n                          ? user.following.length\n                          : \"Loading...\"}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Followers Column */}\n                  <div className=\"flex-1 flex justify-center items-center\">\n                    <div className=\"text-center\">\n                      <div className=\"font-semibold\">Followers</div>\n                      <div>\n                        {user && Array.isArray(user.followers)\n                          ? user.followers.length\n                          : \"Loading...\"}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"w-1/2 pl-2 \">\n                <div className=\"p-10\">\n                  <div className=\"user-info-field flex flex-col mb-4\">\n                    <label className=\"mb-1 text-sm font-semibold\">Email</label>\n                    <input\n                      className=\"border-0 border-b-2 border-gray-300   text-gray-600 bg-transparent focus:outline-none focus:ring-0\"\n                      type=\"text\"\n                      value={user ? user.email : \"Loading...\"}\n                      readOnly\n                    />\n                  </div>\n\n                  <div className=\"user-info-field flex flex-col mb-4\">\n                    <label className=\"mb-1 text-sm font-semibold\">\n                      Username\n                    </label>\n                    <input\n                      className=\"border-0 border-b-2 border-gray-300  text-gray-600 bg-transparent focus:outline-none focus:ring-0\"\n                      type=\"text\"\n                      value={user ? user.username : \"Loading...\"}\n                      readOnly\n                    />\n                  </div>\n\n                  <div className=\"user-info-field flex flex-col mb-4\">\n                    <label className=\"mb-1 text-sm font-semibold\">\n                      Password\n                    </label>\n                    <input\n                      className=\"border-0 border-b-2 border-gray-300 text-gray-600 bg-transparent focus:outline-none focus:ring-0\"\n                      type=\"password\"\n                      value={\"****************\"}\n                      readOnly\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </header>\n  );\n};\n\nexport default Nav;\n","/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/Sidebar.jsx",["55"],[],"import React, { useState, useEffect, useContext } from \"react\";\nimport Logo from \"../assets/FILO_Logo.png\";\n// import UserContext from './UserContext';\n\n\nconst Sidebar = ({ userId }) => {\n  // const { user, dmUsers, channels } = useContext(UserContext);\n\n  const [channels, setChannels] = useState([]);\n  const [dmUsers, setDmUsers] = useState([]);\n  const [user, setUser] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  useEffect(() => {\n    fetch(\"/get-user\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok \" + response.statusText);\n        }\n        return response.json();\n      })\n      .then((userData) => {\n        setDmUsers(userData.direct_messages);\n        console.log(userData.direct_messages);\n        setChannels(userData.channels);\n        setUser(userData);\n      })\n      .catch((error) => {\n        console.error(\n          \"There has been a problem with your fetch operation:\",\n          error\n        );\n      });\n  }, []);\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  // Prevent modal close when clicking inside the modal content\n  const handleModalContentClick = (e) => {\n    e.stopPropagation();\n  };\n\n  const [channelName, setChannelName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [memberLimit, setMemberLimit] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n  const [timeZone, setTimeZone] = useState(\"\");\n  const [never, setNever] = useState(false);\n\n  if (!handleOpenModal) return null;\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Handle the form submission logic\n    console.log(\"Form submitted\");\n    console.log(channelName);\n    console.log(description);\n    console.log(memberLimit);\n    console.log(date);\n    console.log(time);\n    console.log(timeZone);\n    console.log(never);\n  };\n\n  return (\n    <>\n      <header>\n        <aside className=\"sidebar_bg h-screen py-3 w-20 fixed z-10 flex flex-col\">\n          <div className=\"flex flex-col items-center\">\n            <a href=\"/\" className=\"mb-6\">\n              <img src={Logo} alt=\"logo\" width={50} />\n            </a>\n\n            {/* Direct Messages */}\n\n            {/* when user's image is clicked, redirect to the messaging and also send that user's name to the server */}\n\n            {dmUsers.map((dm) => (\n              <div\n                key={dm._id}\n                className=\"group flex h-14 w-14 transform items-center justify-center rounded-full bg-primaryBlue transition-transform hover:scale-110 mt-6 relative cursor-pointer\"\n                // className=\"group transform flex h-14 w-14 items-center justify-center rounded-full bg-primaryBlue mt-6 relative hover:scale-110 cursor-pointer\"\n              >\n                <img\n                  src={require(`../assets/${dm.profile_path}`)}\n                  alt={dm.username}\n                  className=\"rounded-full w-full h-full object-cover\"\n                />\n                <span className=\"absolute left-full top-1/2 transform -translate-y-1/2 ml-2 hidden group-hover:block whitespace-nowrap rounded-md bg-sand py-1 px-3 text-lg text-bold text-primaryBlue shadow-lg transition-opacity duration-300 ease-in-out delay-150 z-10\">\n                  {dm.username}\n                </span>\n              </div>\n            ))}\n\n            <hr className=\"sidebar-divider my-4 w-2/3\" />\n\n            {/* Channels */}\n            {channels.map((channel) => (\n              <div\n                key={channel._id}\n                className=\"group flex h-14 w-14 items-center justify-center rounded-full bg-primaryBlue relative cursor-pointer\"\n              >\n                <img\n                  src={require(`../assets/${channel.image}`)} // Adjust the path as necessary\n                  alt={channel.name}\n                  className=\"rounded-full w-full h-full object-cover\"\n                />\n                <span className=\"absolute left-full top-1/2 transform -translate-y-1/2 ml-2 hidden group-hover:block whitespace-nowrap rounded-md bg-sand py-1 px-3 text-lg text-bold text-primaryBlue shadow-lg transition-opacity duration-300 ease-in-out delay-150 z-10\">\n                  {channel.name}\n                </span>\n              </div>\n            ))}\n          </div>\n\n          <div\n            className=\"mt-auto flex flex-col items-center pb-6\"\n            onClick={handleOpenModal} // Open the modal on click\n          >\n            {\" \"}\n            <div className=\"relative group h-14 w-14 rounded-full bg-sand flex items-center justify-center text-2xl font-bold text-goldenOrange cursor-pointer\">\n              <div className=\"\">+</div>\n              <span className=\"absolute left-full top-1/2 transform -translate-y-1/2 ml-2 hidden group-hover:block whitespace-nowrap rounded-md bg-white py-1 px-3 text-sm shadow-lg transition-opacity duration-300 ease-in-out delay-150 text-primaryBlue z-10\">\n                Create new Channel\n              </span>\n            </div>\n          </div>\n        </aside>\n      </header>\n      {isModalOpen && (\n        <div\n          id=\"modal-backdrop\"\n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 flex justify-center items-center\"\n          onClick={handleCloseModal} // Close the modal on backdrop click\n        >\n          <div\n            className=\"nav_bg p-4 rounded text-white\"\n            style={{ minHeight: \"40vh\", minWidth: \"80vh\" }}\n            onClick={handleModalContentClick} // Prevents event bubbling to backdrop\n          >\n            <h2 className=\"text-amber-500 pb-10 text-center text-3xl\t\">\n              New Channel\n            </h2>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Channel Name\"\n                  className=\"bg-transparent border-none appearance-none leading-tight focus:outline-none w-full\"\n                  value={channelName}\n                  onChange={(e) => setChannelName(e.target.value)}\n                  required\n                />\n                <hr />\n              </div>\n              <div>\n                <textarea\n                  placeholder=\"Description\"\n                  className=\"bg-transparent border-none appearance-none leading-tight focus:outline-none w-full h-20 resize-none overflow-auto\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  required\n                />\n                <hr className=\"my-2\" />\n              </div>\n\n              <div className=\"flex flex-wrap\">\n                <div className=\"flex flex-col items-center w-1/3 border-r\">\n                  {/* Image Container */}\n                  <div className=\"w-full flex justify-center p-10\">\n                    <div className=\"relative\">\n                      {user && user.profile_image && (\n                        <img\n                          src={require(`../assets/${user.profile_image}`)}\n                          alt=\"profile\"\n                          className=\"w-48 h-auto cursor-pointer rounded-full\"\n                        />\n                      )}\n                      {/* Upload Icon Overlay */}\n                      <input\n                        type=\"file\"\n                        id=\"profile-upload\"\n                        className=\"hidden\"\n                      />\n                      {/* Upload Icon Overlay */}\n                      <label\n                        htmlFor=\"profile-upload\"\n                        className=\"absolute bottom-10 right-10 bg-blue-300 text-white rounded-full \n                            flex items-center justify-center w-10 h-10 cursor-pointer\"\n                      >\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          fill=\"none\"\n                          viewBox=\"0 0 24 24\"\n                          stroke=\"currentColor\"\n                          className=\"w-6 h-6\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth=\"2\"\n                            d=\"M12 4v16m8-8H4\"\n                          />\n                        </svg>\n                      </label>\n                      <div className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"number\"\n                          placeholder=\"# of Members\"\n                          className=\"px-4 py-2 border rounded-md text-black\"\n                          value={memberLimit}\n                          onChange={(e) => setMemberLimit(e.target.value)}\n                          required\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex flex-col w-2/3\">\n                  <h2 className=\"text-white pb-4 text-xl\t\">Session End Time</h2>\n                  <div>\n                    <input\n                      type=\"checkbox\"\n                      checked={never}\n                      onChange={(e) => setNever(e.target.checked)}\n                      className=\"h-4 w-4 text-indigo-600 mx-2\"\n                    />\n                    <span>Never</span>\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"date\"\n                      className={`px-4 py-2 border rounded-md text-gray-500 ${\n                        never ? \"bg-gray-200\" : \"\"\n                      }`}\n                      value={date}\n                      onChange={(e) => setDate(e.target.value)}\n                      disabled={never}\n                      required={!never}\n                    />\n                    <input\n                      type=\"time\"\n                      className={`px-4 py-2 border rounded-md text-gray-500 ${\n                        never ? \"bg-gray-200\" : \"\"\n                      }`}\n                      value={time}\n                      onChange={(e) => setTime(e.target.value)}\n                      disabled={never}\n                      required={!never}\n                    />\n                    {/* Replace the below with your actual time zones options */}\n                    <select\n                      className={`px-4 py-2 border rounded-md text-gray-500${\n                        never ? \"bg-gray-200\" : \"\"\n                      }`}\n                      value={timeZone}\n                      onChange={(e) => setTimeZone(e.target.value)}\n                      disabled={never}\n                      required={!never}\n                    >\n                      <option value=\"\">Select Time Zone</option>\n                      <option value=\"PST\">PST</option>\n                      <option value=\"EST\">EST</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end pt-2\">\n                <button\n                  type=\"button\"\n                  className=\"px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-20 mr-2\"\n                  onClick={handleCloseModal}\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"submit\"\n                  className=\"px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md w-20\"\n                >\n                  Create\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Sidebar;\n","/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/Register.jsx",[],[],"/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/Messages.jsx",["56","57"],[],"import React, { useState, useEffect } from \"react\";\nimport Profile from \"../assets/mainProfile.svg\";\nimport SendIcon from \"../assets/sendIcon.svg\";\n\n\nfunction Messages() {\n\n  // how do I get the data from the user (_id) database? useEffect?\n  const [user, setUser] = useState(null); // Added this state to hold the user's name\n\n  useEffect(() => {\n    // Fetch user when component mounts\n    fetch(\"/get-dm\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok \" + response.statusText);\n        }\n        return response.json();\n      })\n      .then((user) => {\n        setUser(user);\n        console.log(user);\n      })\n      .catch((error) => {\n        console.error(\n          \"There has been a problem with your fetch operation:\",\n          error\n        );\n      });\n  }, []);\n  \n  // \n  return (\n    <div className=\"home_bg min-h-screen h-full ml-20\">\n      {/*   TODO: Make Messaging page Like the Figma, Should fetch the messages and information from the backend \n                For DMS use /get-dm and send the DM ID  will give oyu all the User Info\n        MORE IMPORTANT LO2: For Channels should use /get-Channel  Send the Channel ID they clicked to backend.\n        using webSockets should countdown\n      */}\n      {/* 1) the code below is for displaying the chat's icon and chat name */}\n      <div className='flex items-center pt-4 pl-6 pb-4 border-b-[1px]'>\n        <div className='h-14 w-14 rounded-full bg-white mr-2'></div>\n        <div className='mx-4 font-semibold text-goldenOrange text-2xl'>\n            USERNAME\n        </div>\n      </div>\n      <div class=\"min-h-screen flex items-end justify-center pb-6\">\n        <form class=\"w-3/4 flex\">\n          <input class=\"bg-white flex-1 h-10 rounded-l-2xl\">\n            <button\n              type=\"submit\"\n              class=\"bg-none hover:scale-150 text-white font-semibold mx-4 rounded-r-2xl\"\n            >\n              <img src={SendIcon} alt=\"send\" width={20} height={20} />\n            </button>\n          </input>\n        </form>\n      </div>\n\n\n\n\n    </div>\n  )\n}\n\nexport default Messages\n","/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/Posts.jsx",["58","59","60","61"],[],"import React, { useState, useEffect } from \"react\";\nimport Profile from \"../assets/mainProfile.svg\";\nimport heartIcon from \"../assets/heart-regular.svg\";\nimport redHeart from \"../assets/redHeart.svg\";\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n\n  const [user, setUser] = useState(null); // Added this state to hold the user's name\n\n  useEffect(() => {\n    // Fetch user when component mounts\n    fetch(\"/get-user\")\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok \" + response.statusText);\n        }\n        return response.json();\n      })\n      .then((user) => {\n        setUser(user);\n        console.log(user);\n      })\n      .catch((error) => {\n        console.error(\n          \"There has been a problem with your fetch operation:\",\n          error\n        );\n      });\n  }, []);\n\n  const [clicked, setClicked] = useState([]);\n  const [formData, setFormData] = useState({\n    like_counts: \"\",\n  });\n  const { like_counts } = formData;\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handleLikes = async (postId, index) => {\n    const dataToSend = { postId, userId: user.username };\n\n    try {\n      await fetch(\"/post-like\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(dataToSend),\n      });\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  function handleClick(postId, index) {\n    const updatedPosts = [...posts];\n    const post = updatedPosts[index];\n\n    if (post.likers.includes(user.username)) {\n      // If the post is already liked, unlike it\n      const likerIndex = post.likers.indexOf(user.username);\n      post.likers.splice(likerIndex, 1);\n      post.like_counter--;\n    } else {\n      // If the post is not yet liked, like it\n      post.likers.push(user.username);\n      post.like_counter++;\n    }\n\n    setPosts(updatedPosts);\n    handleLikes(postId, index); // This will now just update the like status in the backend\n  }\n\n  useEffect(() => {\n    const fetchPosts = () => {\n      fetch(\"/get-posts\")\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error(\n              \"Network response was not ok \" + response.statusText\n            );\n          }\n          return response.json();\n        })\n        .then((data) => {\n          setPosts(data.reverse());\n          console.log(data);\n          setClicked(new Array(data.length).fill(false));\n        })\n        .catch((error) => {\n          console.error(\n            \"There has been a problem with your fetch operation:\",\n            error\n          );\n          setError(error.toString());\n        });\n    };\n\n    fetchPosts();\n\n    const intervalId = setInterval(fetchPosts, 5000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return (\n    <div className=\"justify-center\">\n      {error ? (\n        <p className=\"text-red-500 text-xl\">Error: {error}</p>\n      ) : posts.length === 0 ? (\n        <div className=\"flex justify-center items-center\">\n          <p className=\"text-sand text-4xl text-center\">No posts available!</p>\n        </div>\n      ) : (\n        posts.map((post, index) => (\n          <div\n            key={index}\n            className=\"max-w-5xl mx-auto my-1 p-3 bg-post rounded-xl text-white\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                {user && user.profile_image && (\n                  <img\n                    src={require(`../assets/${user.profile_image}`)}\n                    alt=\"profile\"\n                    className=\"w-10 h-10 rounded-full\"\n                  />\n                )}\n                <h2 className=\"text-xl\">{post.username}</h2>\n              </div>\n              {/* TODO: Add follow functionality */}\n              <button className=\"text-blue-300 text-md px-3 cursor-pointer hover:scale-110\">\n                Follow\n              </button>\n            </div>\n\n            <hr className=\"my-4\" />\n            <h1 className=\"text-2xl text-sand font-bold\">{post.title}</h1>\n            <hr className=\"my-4\" />\n            {post.description && (\n              <div>\n                <p className=\"text-sand\">{post.description}</p>\n                <hr className=\"my-2\" />\n              </div>\n            )}\n\n            <div className=\"mt-2 w-5 h-5 flex items-center space-x-2\">\n              {user && post.likers.includes(user.username) ? (\n                <img\n                  src={redHeart}\n                  onClick={() => handleClick(post._id, index)}\n                  alt=\"Liked\"\n                  className=\"hover:scale-110\"\n                />\n              ) : (\n                <img\n                  src={heartIcon}\n                  onClick={() => handleClick(post._id, index)}\n                  alt=\"Like\"\n                  className=\"hover:scale-110\"\n                />\n              )}\n              <span className=\"text-white\">{post.like_counter}</span>{\" \"}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Posts;\n","/Users/solomonlian/Desktop/CSE312/Project/FILO/src/components/UserContext.js",[],[],{"ruleId":"62","severity":1,"message":"63","line":7,"column":10,"nodeType":"64","messageId":"65","endLine":7,"endColumn":19},{"ruleId":"62","severity":1,"message":"66","line":1,"column":46,"nodeType":"64","messageId":"65","endLine":1,"endColumn":56},{"ruleId":"62","severity":1,"message":"67","line":3,"column":8,"nodeType":"64","messageId":"65","endLine":3,"endColumn":27},{"ruleId":"62","severity":1,"message":"66","line":1,"column":38,"nodeType":"64","messageId":"65","endLine":1,"endColumn":48},{"ruleId":"62","severity":1,"message":"68","line":2,"column":8,"nodeType":"64","messageId":"65","endLine":2,"endColumn":15},{"ruleId":"62","severity":1,"message":"69","line":9,"column":10,"nodeType":"64","messageId":"65","endLine":9,"endColumn":14},{"ruleId":"62","severity":1,"message":"68","line":2,"column":8,"nodeType":"64","messageId":"65","endLine":2,"endColumn":15},{"ruleId":"62","severity":1,"message":"70","line":33,"column":10,"nodeType":"64","messageId":"65","endLine":33,"endColumn":17},{"ruleId":"62","severity":1,"message":"71","line":37,"column":11,"nodeType":"64","messageId":"65","endLine":37,"endColumn":22},{"ruleId":"62","severity":1,"message":"72","line":38,"column":9,"nodeType":"64","messageId":"65","endLine":38,"endColumn":21},"no-unused-vars","'isFocused' is assigned a value but never used.","Identifier","unusedVar","'useContext' is defined but never used.","'DefaultProfileImage' is defined but never used.","'Profile' is defined but never used.","'user' is assigned a value but never used.","'clicked' is assigned a value but never used.","'like_counts' is assigned a value but never used.","'handleChange' is assigned a value but never used."]