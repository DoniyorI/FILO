[{"/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/index.js":"1","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/App.jsx":"2","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/UserContext.js":"3","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/Nav.jsx":"4","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/Home.jsx":"5","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/Sidebar.jsx":"6","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/Register.jsx":"7","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/Messages.jsx":"8","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/SidebarMsg.jsx":"9","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/Posts.jsx":"10"},{"size":488,"mtime":1699508830038,"results":"11","hashOfConfig":"12"},{"size":1409,"mtime":1699682599821,"results":"13","hashOfConfig":"12"},{"size":1022,"mtime":1699657371955,"results":"14","hashOfConfig":"12"},{"size":11381,"mtime":1699665995972,"results":"15","hashOfConfig":"12"},{"size":5616,"mtime":1699594790322,"results":"16","hashOfConfig":"12"},{"size":14587,"mtime":1699681519950,"results":"17","hashOfConfig":"12"},{"size":7391,"mtime":1699508830038,"results":"18","hashOfConfig":"12"},{"size":5728,"mtime":1699687959446,"results":"19","hashOfConfig":"12"},{"size":1573,"mtime":1699642669986,"results":"20","hashOfConfig":"12"},{"size":6943,"mtime":1699594790329,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iumz9j",{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},"/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/index.js",[],[],"/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/App.jsx",[],[],"/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/UserContext.js",[],[],"/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/Nav.jsx",["58","59","60"],[],"import React, { useState, useEffect, useRef, useContext } from \"react\";\nimport Logo from \"../assets/FILO_Logo.png\";\n\nimport UserContext from \"./UserContext\";\n\nconst Nav = () => {\n  const [isProfileMenuOpen, setProfileMenuOpen] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const profileMenuRef = useRef(null);\n  const modalRef = useRef(null);\n\n  const { user, dmUsers, channels } = useContext(UserContext);\n\n  const handleMenu = () => {\n    setProfileMenuOpen(false);\n  };\n\n  useEffect(() => {\n    const handleDocumentClick = (e) => {\n      // Close profile menu if click is outside\n      if (\n        profileMenuRef.current &&\n        !profileMenuRef.current.contains(e.target)\n      ) {\n        setProfileMenuOpen(false);\n      }\n      // Close modal if click is outside\n      if (\n        isModalOpen &&\n        modalRef.current &&\n        !modalRef.current.contains(e.target)\n      ) {\n        setIsModalOpen(false);\n      }\n    };\n\n    // Add event listener when the component is mounted\n    document.addEventListener(\"mousedown\", handleDocumentClick);\n\n    // Cleanup the event listener when the component is unmounted\n    return () => {\n      document.removeEventListener(\"mousedown\", handleDocumentClick);\n    };\n  }, [isModalOpen]);\n\n  const handleProfileIconClick = () => {\n    setProfileMenuOpen(!isProfileMenuOpen);\n  };\n\n  const handleProfileClick = () => {\n    setIsModalOpen(true);\n    setProfileMenuOpen(false); // Close dropdown menu\n  };\n\n  const [newImage, setNewImage] = useState(null);\n  const [saveChanges, setSaveChanges] = useState(false);\n\n  const handleChange = (e) => {\n    if (e.target.files && e.target.files[0]) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        // Update the new image state\n        setNewImage(e.target.result);\n        // Set the saveChanges flag to true\n        setSaveChanges(true);\n      };\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const handleCancel = () => {\n    // Reset the newImage state and close the modal\n    setNewImage(null);\n    setIsModalOpen(false);\n  };\n\n  const handleSave = () => {\n    if (saveChanges && newImage) {\n      const payload = {\n        username: user.username,\n        image: newImage, // Send the base64-encoded image data directly\n      };\n  \n      fetch('/new-profile', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (data.success) {\n            console.log(\"Profile uploaded successfully\");\n            // Reset the saveChanges flag\n            setSaveChanges(false);\n            window.location.href = \"/\";\n          } else {\n            console.error(\"Error uploading profile:\", data.error);\n          }\n        });\n    }\n\n    // Close the modal\n    setIsModalOpen(false);\n  };\n  return (\n    // TODO: Implement search bar\n    <header>\n      <nav className=\"nav_bg flex justify-between items-center w-full z-10 py-2 px-8 shadow-lg\">\n        <a href=\"/\">\n          {/* <img src={Logo} alt=\"logo\" width={35} height={25} /> */}\n        </a>\n        <div className=\"flex gap-6 px-4\">\n          <h1 className=\"text-sand text-2xl font-bold\">\n            {user ? user.username : \"Loading...\"}\n          </h1>\n          <div ref={profileMenuRef}>\n            {user && user.profile_image && (\n              <div className=\"w-10 h-10 rounded-full overflow-hidden\">\n              <img\n                onClick={handleProfileIconClick}\n                src={user.profile_image}\n                alt=\"profile\"\n                className=\"w-full h-full object-cover cursor-pointer\"\n              />\n            </div>\n            )}\n            {isProfileMenuOpen && (\n              <div className=\"absolute top-16 right-6 bg-primaryBlue text-sand shadow-md p-2 border-2 border-sand rounded-md\">\n                <ul className=\"text-center\">\n                  <li\n                    className=\"hover:scale-110 hover:underline cursor-pointer\"\n                    onClick={handleProfileClick}\n                  >\n                    Profile\n                  </li>\n                  <li\n                    className=\"hover:scale-110 hover:underline cursor-pointer\"\n                    onClick={handleMenu}\n                  >\n                    Settings\n                  </li>\n                  <li\n                    className=\"hover:scale-110 hover:underline cursor-pointer\"\n                    onClick={handleMenu}\n                  >\n                    Logout\n                  </li>\n                </ul>\n              </div>\n            )}\n          </div>\n        </div>\n      </nav>\n      {isModalOpen && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-40 flex justify-center items-center \">\n          <div\n            ref={modalRef}\n            className=\"nav_bg p-4 rounded text-white \"\n            style={{ minHeight: \"50vh\", minWidth: \"80vw\" }}\n          >\n            <h2 className=\"text-amber-500 pb-10 text-center text-3xl\t\">\n              User Profile\n            </h2>\n            <div className=\"flex flex-wrap\">\n              <div className=\"flex flex-col items-center w-1/2 border-r\">\n                {/* Image Container */}\n                <div className=\"w-full flex justify-center p-10\">\n                  <div className=\"relative\">\n                    {newImage ? ( // Display the new image if available\n                      <div className=\"w-52 h-52 rounded-full overflow-hidden\">\n                        <img\n                          src={newImage}\n                          alt=\"profile\"\n                          className=\"w-full h-full object-cover cursor-pointer\"\n                        />\n                      </div>\n                    ) : (\n                      user &&\n                      user.profile_image && ( // Display the user's existing profile image\n                        <div className=\"w-52 h-52 rounded-full overflow-hidden\">\n                          <img\n                            src={user.profile_image}\n                            alt=\"profile\"\n                            className=\"w-full h-full object-cover cursor-pointer\"\n                          />\n                        </div>\n                      )\n                    )}\n                    {/* Upload Icon Overlay */}\n                    <input\n                      type=\"file\"\n                      id=\"profile-upload\"\n                      onChange={handleChange}\n                      className=\"hidden\"\n                    />\n\n                    {/* Upload Icon Overlay */}\n                    <label\n                      htmlFor=\"profile-upload\"\n                      className=\"absolute bottom-2 right-3 bg-blue-300 text-white rounded-full flex items-center justify-center w-10 h-10 cursor-pointer\"\n                    >\n                      <svg\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        fill=\"none\"\n                        viewBox=\"0 0 24 24\"\n                        stroke=\"currentColor\"\n                        className=\"w-6 h-6\"\n                      >\n                        <path\n                          strokeLinecap=\"round\"\n                          strokeLinejoin=\"round\"\n                          strokeWidth=\"2\"\n                          d=\"M12 4v16m8-8H4\"\n                        />\n                      </svg>\n                    </label>\n                  </div>\n                </div>\n\n                {/* Information Container */}\n                <div className=\"w-full flex justify-between px-2 text-2xl pb-10\">\n                  <div className=\"flex-1 flex justify-center items-center border-r\">\n                    <div className=\"text-center\">\n                      <div className=\"font-semibold\">Following</div>\n                      <div>\n                        {user && Array.isArray(user.following)\n                          ? user.following.length\n                          : \"Loading...\"}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Followers Column */}\n                  <div className=\"flex-1 flex justify-center items-center\">\n                    <div className=\"text-center\">\n                      <div className=\"font-semibold\">Followers</div>\n                      <div>\n                        {user && Array.isArray(user.followers)\n                          ? user.followers.length\n                          : \"Loading...\"}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"w-1/2 pl-2 \">\n                <div className=\"p-10\">\n                  <div className=\"user-info-field flex flex-col mb-4\">\n                    <label className=\"mb-1 text-sm font-semibold\">Email</label>\n                    <input\n                      className=\"border-0 border-b-2 border-gray-300   text-gray-600 bg-transparent focus:outline-none focus:ring-0\"\n                      type=\"text\"\n                      value={user ? user.email : \"Loading...\"}\n                      readOnly\n                    />\n                  </div>\n\n                  <div className=\"user-info-field flex flex-col mb-4\">\n                    <label className=\"mb-1 text-sm font-semibold\">\n                      Username\n                    </label>\n                    <input\n                      className=\"border-0 border-b-2 border-gray-300  text-gray-600 bg-transparent focus:outline-none focus:ring-0\"\n                      type=\"text\"\n                      value={user ? user.username : \"Loading...\"}\n                      readOnly\n                    />\n                  </div>\n\n                  <div className=\"user-info-field flex flex-col mb-4\">\n                    <label className=\"mb-1 text-sm font-semibold\">\n                      Password\n                    </label>\n                    <input\n                      className=\"border-0 border-b-2 border-gray-300 text-gray-600 bg-transparent focus:outline-none focus:ring-0\"\n                      type=\"password\"\n                      value={\"****************\"}\n                      readOnly\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"flex justify-center mt-4\">\n              {/* Render the Save and Cancel buttons based on the saveChanges flag */}\n              {saveChanges ? (\n                <>\n                  <button\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded-md mr-4\"\n                    onClick={handleSave}\n                  >\n                    Save\n                  </button>\n                  <button\n                    className=\"bg-gray-400 text-white px-4 py-2 rounded-md\"\n                    onClick={handleCancel}\n                  >\n                    Cancel\n                  </button>\n                </>\n              ) : (\n                <button\n                  className=\"bg-gray-400 text-white px-4 py-2 rounded-md\"\n                  onClick={handleCancel}\n                >\n                  Cancel\n                </button>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </header>\n  );\n};\n\nexport default Nav;\n","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/Home.jsx",["61"],[],"import React, { useRef, useEffect, useState } from \"react\";\nimport Posts from \"./Posts\";\nimport SendIcon from \"../assets/sendIcon.svg\";\nimport { LuImagePlus } from \"react-icons/lu\";\nimport { MdCancel } from \"react-icons/md\"; \n\n\nconst Home = () => {\n  const [isFocused, setIsFocused] = useState(false);\n  const [showDescription, setShowDescription] = useState(false);\n  const [imageBase64, setImageBase64] = useState('');\n  const [formData, setFormData] = useState({\n    new_title: \"\",\n    new_description: \"\",\n  });\n  const formRef = useRef();\n  const removeImage = () => {\n    setImageBase64('');\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (formRef.current && !formRef.current.contains(event.target)) {\n        setShowDescription(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [formRef]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData((prev) => ({ ...prev, [name]: value }));\n  };\n\n  const handleImageChange = (e) => {\n    if (e.target.files && e.target.files[0]) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setImageBase64(e.target.result);\n      };\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const handleNewPost = async (event) => {\n    event.preventDefault();\n\n    const dataToSend = {\n      title: formData.new_title,\n      description: formData.new_description,\n      image: imageBase64, // add the image base64 to the data to send\n    };\n\n    try {\n      console.log(\"dataToSend: \", dataToSend);\n      const response = await fetch(\"/posts-upload\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(dataToSend),\n      });\n\n      if (response.ok) {\n        window.location.href = \"/\";\n      } else {\n        // handle error\n      }\n    } catch (error) {\n      window.location.href = \"/\";\n      console.error(\"Error:\", error);\n    }\n  };\n  // TODO: Update Posts to load images look at the way profile images are uploaded should be similar\n\n  return (\n    <div className=\"home_bg min-h-screen h-full ml-16\">\n      <div className=\"flex justify-center items-center text-3xl text-white pt-2\">\n        <a\n          href=\"/\"\n          className=\"px-4 text-base hover:underline underline-offset-8\"\n        >\n          Home\n        </a>\n        |\n        <a\n          href=\"/\"\n          className=\"px-4 text-base hover:underline underline-offset-8\"\n        >\n          Following\n        </a>\n      </div>\n\n      <div\n        className=\"max-w-5xl mx-auto p-4 my-8 bg-primaryDark shadow-md rounded-md text-sand\"\n        ref={formRef}\n      >\n        <h1 className=\"text-base font-semibold mb-2 text-center\">New Post</h1>\n        <form onSubmit={handleNewPost}>\n          <input\n            name=\"new_title\"\n            className=\"bg-transparent border-none appearance-none leading-tight focus:outline-none w-full\"\n            placeholder=\"What's On Your Mind?\"\n            value={formData.new_title}\n            onFocus={() => {\n              setIsFocused(true);\n              setShowDescription(true);\n            }}\n            onBlur={() => setIsFocused(false)}\n            onChange={handleInputChange}\n          />\n          <hr />\n          {showDescription && (\n            <div className=\"mt-2\">\n              <textarea\n                name=\"new_description\"\n                className=\"bg-transparent border-none appearance-none leading-tight focus:outline-none w-full h-20 resize-none overflow-auto\"\n                placeholder=\"Description\"\n                value={formData.new_description}\n                onFocus={() => {\n                  setIsFocused(true);\n                  setShowDescription(true);\n                }}\n                onChange={handleInputChange}\n              />\n              <hr className=\"p-2\" />\n\n              <div className=\"flex justify-end items-center\">\n              <label className=\"cursor-pointer\">\n              <LuImagePlus \n                className=\"w-7 h-7 inline-block text-white mr-2 hover:scale-125\"\n              />\n              <input\n                type=\"file\"\n                className=\"hidden\"\n                onChange={handleImageChange}\n                accept=\"image/*\"\n              />\n            </label>\n            {imageBase64 && (\n              <div className=\"relative w-full flex justify-center\">\n              <div className=\"relative\" style={{ height: '100px' }}>\n                {/* The image itself */}\n                <img src={imageBase64} alt=\"Preview\" style={{ height: '100px' }} className=\"object-contain\" />\n                {/* The button to remove the image */}\n                <button\n                  type=\"button\"\n                  className=\"absolute top-0 right-0 bg-red-500 text-white rounded-full p-1\"\n                  onClick={removeImage}\n                  style={{ transform: 'translate(50%, -50%)' }} // Adjust position to be on the edge\n                >\n                  <MdCancel />\n                </button>\n              </div>\n            </div>\n            )}\n            <button\n              type=\"submit\"\n              className=\"bg-none hover:scale-125 text-white font-semibold mx-4 rounded-md justify-between\"\n            >\n              <img src={SendIcon} alt=\"send\" width={20} height={20} />\n            </button>\n\n              </div>\n            </div>\n          )}\n        </form>\n      </div>\n\n      <Posts />\n    </div>\n  );\n};\n\nexport default Home;","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/Sidebar.jsx",["62","63"],[],"import React, { useState, useContext } from \"react\";\nimport Logo from \"../assets/FILO_Logo.png\";\nimport UserContext from \"./UserContext\";\nimport { useNavigate } from 'react-router-dom';\n\n\nconst Sidebar = ({ userId }) => {\n  const navigate = useNavigate();\n  const { user, dmUsers, channels } = useContext(UserContext);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n\n  // Prevent modal close when clicking inside the modal content\n  const handleModalContentClick = (e) => {\n    e.stopPropagation();\n  };\n\n  const [channelName, setChannelName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [memberLimit, setMemberLimit] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [time, setTime] = useState(\"\");\n  const [timeZone, setTimeZone] = useState(\"\");\n  const [never, setNever] = useState(false);\n  const [channelImage, setChannelImage] = useState(null);\n\n  if (!handleOpenModal) return null;\n\n  const handleChange = (e) => {\n    if (e.target.files && e.target.files[0]) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setChannelImage(e.target.result);\n      };\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(\"channelName: \", channelName);\n    console.log(\"description: \", description);\n    console.log(\"memberLimit: \", memberLimit);\n    console.log(\"date: \", date);\n    console.log(\"time: \", time);\n    console.log(\"timeZone: \", timeZone);\n    console.log(\"channelImage: \", channelImage);\n    console.log(\"never: \", never);\n\n    fetch('/create-channel', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json', // Set the content type to JSON\n      },\n      body: JSON.stringify({\n        username: user.username,\n        channel_name: channelName,\n        description: description,\n        member_limit: memberLimit,\n        date: date,\n        time: time,\n        time_zone: timeZone,\n        image_path: channelImage, // Assuming newImage contains the image data\n        never: never,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.success) {\n          console.log(\"New channel created successfully\");\n          // Reset the form and navigate to the desired page\n          setChannelName(\"\");\n          setDescription(\"\");\n          setMemberLimit(\"\");\n          setDate(\"\");\n          setTime(\"\");\n          setTimeZone(\"\");\n          setNever(false);\n          setChannelImage(null);\n          window.location.href = \"/\";\n        } else {\n          console.error(\"Error creating channel:\", data.message);\n        }\n      })\n      .catch((error) => {\n        console.error(\"Error creating channel:\", error);\n      });\n  };\n\n  const handleChannelClick = (channelName) => {\n    navigate(`/messages/${channelName}`);\n}\n\n \n  // const handleChannelClick = (channelName, username) => {\n\n    \n  //   const queryParams = new URLSearchParams({\n  //     channel_name: channelName,\n  //     username: username\n  //   });\n\n  //   console.log(\"channelName:\", channelName);\n  //   console.log(\"username:\", username);\n  //   console.log(\"queryParams:\", queryParams.toString());\n  \n  //   fetch(`/get-channel?${queryParams.toString()}`, { // Modified line\n  //     method: 'GET', // Changed to GET\n  //     headers: {\n  //       'Content-Type': 'application/json',\n  //     },\n  //   })\n  //   .then((response) => response.json())\n  //   .then((channelData) => {\n  //     // Redirect to the new path with the channel data\n  //     navigate(`/messages/${channelData.channel_name}`, { state: { channelData } });\n  //   })\n  //   .catch((error) => {\n  //     console.error(\"Error fetching channel data:\", error);\n  //   });\n  // }\n  \n  return (\n    <>\n      <header>\n        <aside className=\"sidebar_bg h-screen py-3 w-16 fixed z-10 flex flex-col\">\n          <div className=\"flex flex-col items-center\">\n            <a href=\"/\" className=\"\">\n              <img src={Logo} alt=\"logo\" width={50} />\n            </a>\n\n            {/* Direct Messages */}\n\n            {/* when user's image is clicked, redirect to the messaging and also send that user's name to the server */}\n\n            {dmUsers.map((dm) => (\n              <div\n                key={dm._id}\n                className=\"group flex h-12 w-12 transform items-center justify-center rounded-full bg-primaryBlue transition-transform hover:scale-110 my-3 relative cursor-pointer\"\n              >\n                <img\n                  src={require(`../assets/${dm.profile_path}`)}\n                  alt={dm.username}\n                  className=\"rounded-full w-full h-full object-cover\"\n                />\n                <span className=\"absolute left-full top-1/2 transform -translate-y-1/2 ml-2 hidden group-hover:block whitespace-nowrap rounded-md bg-sand py-1 px-3 text-lg text-bold text-primaryBlue shadow-lg transition-opacity duration-300 ease-in-out delay-150 z-10\">\n                  {dm.username}\n                </span>\n              </div>\n            ))}\n\n            <hr className=\"sidebar-divider my-2 w-2/3\" />\n\n            {/* Channels */}\n            {channels.map((channel) => (\n              <div\n                key={channel._id}\n                className=\"group flex h-12 w-12 transform items-center justify-center rounded-full bg-goldenOrange transition-transform hover:scale-110 my-3 relative cursor-pointer\"\n                // when the channel is clicked, call on the handleChannel function:\n                onClick={() => handleChannelClick(channel.channel_name, user.username)}\n\n              >\n                <img\n                  src={channel.image_path}\n                  alt={channel.channel_name}\n                  className=\"rounded-full w-full h-full object-cover\"\n                />\n                <span className=\"absolute left-full top-1/2 transform -translate-y-1/2 ml-2 hidden group-hover:block whitespace-nowrap rounded-md bg-sand py-1 px-3 text-lg text-bold text-primaryBlue shadow-lg transition-opacity duration-300 ease-in-out delay-150 z-10\">\n                  {channel.channel_name}\n                </span>\n              </div>\n            ))}\n          </div>\n\n          <div\n            className=\"mt-auto flex flex-col items-center pb-3\"\n            onClick={handleOpenModal} // Open the modal on click\n          >\n            <div className=\"relative group h-12 w-12 rounded-full bg-sand flex items-center justify-center text-2xl font-bold text-goldenOrange cursor-pointer\">\n              <div className=\"\">+</div>\n              <span className=\"absolute left-full top-1/2 transform -translate-y-1/2 ml-2 hidden group-hover:block whitespace-nowrap rounded-md bg-white py-1 px-3 text-sm shadow-lg transition-opacity duration-300 ease-in-out delay-150 text-primaryBlue z-10\">\n                Create new Channel\n              </span>\n            </div>\n          </div>\n        </aside>\n      </header>\n      {isModalOpen && (\n        <div\n          id=\"modal-backdrop\"\n          className=\"fixed inset-0 bg-black bg-opacity-50 z-40 flex justify-center items-center\"\n          onClick={handleCloseModal} // Close the modal on backdrop click\n        >\n          <div\n            className=\"nav_bg p-4 rounded text-white\"\n            style={{ minHeight: \"50vh\", minWidth: \"80vw\" }}\n            onClick={handleModalContentClick}\n          >\n            <h2 className=\"text-amber-500 pb-10 text-center text-3xl\t\">\n              New Channel\n            </h2>\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\n              <div>\n                <input\n                  type=\"text\"\n                  placeholder=\"Channel Name\"\n                  className=\"bg-transparent border-none appearance-none leading-tight focus:outline-none w-full\"\n                  value={channelName}\n                  onChange={(e) => setChannelName(e.target.value)}\n                  required\n                />\n                <hr />\n              </div>\n              <div>\n                <textarea\n                  placeholder=\"Description\"\n                  className=\"bg-transparent border-none appearance-none leading-tight focus:outline-none w-full h-20 resize-none overflow-auto\"\n                  value={description}\n                  onChange={(e) => setDescription(e.target.value)}\n                  required\n                />\n                <hr className=\"my-2\" />\n              </div>\n\n              <div className=\"flex flex-wrap\">\n                <div className=\"flex flex-col items-center w-1/3 border-r\">\n                  {/* Image Container */}\n                  <div className=\"w-full flex justify-center p-10 mb-10\">\n                    <div className=\"relative\">\n                      {channelImage ? ( // Display the new channel image if available\n                        <div className=\"w-44 h-44 rounded-full overflow-hidden mb-4\">\n                          <img\n                            src={channelImage}\n                            alt=\"uploaded-channel-image\"\n                            className=\"w-full h-full object-cover cursor-pointer\"\n                          />\n                        </div>\n                      ) : (\n                        <div className=\"w-44 h-44 rounded-full overflow-hidden mb-4\">\n                          <img\n                            src={\"public/image/channel.svg\"}\n                            alt=\"default-channel-image\"\n                            className=\"w-full h-full object-cover cursor-pointer\"\n                          />\n                        </div>\n                      )}\n                      {/* Upload Icon Overlay */}\n                      <input\n                        type=\"file\"\n                        id=\"channel-image-upload\"\n                        className=\"hidden\"\n                        onChange={handleChange}\n                      />\n                      {/* Upload Icon Overlay */}\n                      <label\n                        htmlFor=\"channel-image-upload\"\n                        className=\"absolute bottom-2 right-3 bg-blue-300 text-white rounded-full \n                        flex items-center justify-center w-10 h-10 cursor-pointer\"\n                      >\n                        <svg\n                          xmlns=\"http://www.w3.org/2000/svg\"\n                          fill=\"none\"\n                          viewBox=\"0 0 24 24\"\n                          stroke=\"currentColor\"\n                          className=\"w-6 h-6\"\n                        >\n                          <path\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            strokeWidth=\"2\"\n                            d=\"M12 4v16m8-8H4\"\n                          />\n                        </svg>\n                      </label>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"number\"\n                      placeholder=\"# of Members\"\n                      className=\"px-4 py-2 border rounded-md text-black\"\n                      value={memberLimit}\n                      onChange={(e) => setMemberLimit(e.target.value)}\n                      required\n                    />\n                  </div>\n                </div>\n                <div className=\"flex flex-col w-2/3\">\n                  <h2 className=\"text-white mx-8 pb-8 text-xl\">\n                    Session End Time:\n                  </h2>\n                  <div className=\"flex flex-col items-center justify-center\">\n                    <div className=\"flex items-center justify-center\">\n                      <input\n                        type=\"checkbox\"\n                        checked={never}\n                        onChange={(e) => setNever(e.target.checked)}\n                        className=\"h-4 w-4 text-indigo-600 mx-2\"\n                      />\n                      <span>Never</span>\n                    </div>\n\n                    <div className=\"flex items-center justify-center space-x-2\">\n                      <input\n                        type=\"date\"\n                        className={`px-4 py-2 border rounded-md text-gray-500 ${\n                          never ? \"bg-gray-200\" : \"\"\n                        }`}\n                        value={date}\n                        onChange={(e) => setDate(e.target.value)}\n                        disabled={never}\n                        required={!never}\n                      />\n                      <input\n                        type=\"time\"\n                        className={`px-4 py-2 border rounded-md text-gray-500 ${\n                          never ? \"bg-gray-200\" : \"\"\n                        }`}\n                        value={time}\n                        onChange={(e) => setTime(e.target.value)}\n                        disabled={never}\n                        required={!never}\n                      />\n                      {/* Replace the below with your actual time zones options */}\n                      <select\n                        className={`px-4 py-2 border rounded-md text-gray-500${\n                          never ? \" bg-gray-200\" : \"\"\n                        }`}\n                        value={timeZone}\n                        onChange={(e) => setTimeZone(e.target.value)}\n                        disabled={never}\n                        required={!never}\n                      >\n                        <option value=\"\">Select Time Zone</option>\n                        <option value=\"PST\">PST</option>\n                        <option value=\"EST\">EST</option>\n                      </select>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end pt-2\">\n                <button\n                  type=\"button\"\n                  className=\"px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-20 mr-2\"\n                  onClick={handleCloseModal}\n                >\n                  Cancel\n                </button>\n                <button\n                  type=\"submit\"\n                  className=\"px-4 py-2 bg-blue-500 text-white text-base font-medium rounded-md w-20\"\n                >\n                  Create\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Sidebar;\n","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/Register.jsx",[],[],"/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/Messages.jsx",["64","65","66","67","68","69"],[],"import React, { useState, useEffect, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport UserContext from \"./UserContext\";\nimport { IoSend } from \"react-icons/io5\";\nimport { io } from \"socket.io-client\"; // for web-sockets\n\nfunction Messages() {\n  const { user, dmUsers, channels } = useContext(UserContext);\n  const { channelName } = useParams();\n  const [channelData, setChannelData] = useState(null);\n  const [error, setError] = useState(null);\n  const [isChannelTime, setIsChannelTime] = useState(null);\n\n  useEffect(() => {\n    fetch(`/get-channel?channel_name=${channelName}`)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(\"Network response was not ok\");\n        }\n        return response.json();\n      })\n      .then((data) => setChannelData(data))\n      .catch((error) => {\n        console.error(\"There was a problem with the fetch operation:\", error);\n        setError(error);\n      });\n  }, [channelName]);\n\n  useEffect(() => {\n    if (!user) {\n      return; // Return early or show a loading state until user is available\n    }\n\n    const timeData = { channel_name: channelName, username: user.username };\n    const socket = io.connect(\"http://127.0.0.1:8080\", {\n      transports: [\"websocket\"],\n    });\n\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to the server\");\n    });\n\n    socket.emit(\"join_channel\", timeData);\n    socket.on(\"request_countdown\", (response) => {\n      setIsChannelTime(response.timeRemaining);\n      console.log(response.timeRemaining);\n    });\n\n    return () => {\n      socket.emit(\"leave_channel\", timeData);\n      socket.disconnect();\n    };\n  }, [channelName, user]);\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n\n  if (!channelData) {\n    return <div>Loading...</div>;\n  }\n  const channelDescription = channelData.description;\n  const channelMembers = channelData.members;\n  const channelMessages = channelData.messages;\n  const channelLimit = channelData.member_limit;\n\n  console.log(channelName);\n  console.log(channelDescription);\n  console.log(channelMembers);\n  console.log(channelMessages);\n  console.log(channelLimit);\n\n  const { description, members, messages, member_limit } = channelData;\n\n  // Mock data for members (if needed)\n  const mockMembers = [\"User 1\", \"User 2\", \"User 3\", \"User 4\", \"User 5\"];\n\n  return (\n    <>\n      {/* Main Content Area */}\n      <section className=\"home_bg flex flex-col h-screen ml-[16.666667vw]\">\n        <div>\n          <nav className=\"fixed top-12 z-10 w-full text-goldenOrange text-2xl flex items-center pl-4\">\n            <div className=\"bg-sand w-11 h-11 border-[1px] border-goldenOrange rounded-full m-2\">\n              {/* IMG */}\n            </div>\n            <h2 className=\"p-2\">CHANNEL NAME {channelName}</h2>\n          </nav>\n          <hr className=\"w-[98%] bg-gray-200 mt-14 mx-auto\" />\n        </div>\n\n        {/* Side bar on right for channel information */}\n        <div className=\"nav_bg w-[15%] fixed mt-14 right-0 h-full z-20 overflow-hidden \">\n          <div className=\"p-4\">\n            <div className=\"text-white\">\n              <h2 className=\"font-bold\">Description:</h2>\n              <p className=\"time-sm\">{channelDescription}</p>\n            </div>\n\n            <div className=\"mt-4 text-white\">\n              <h2 className=\"text-xl font-bold py-5\">\n                Members: {channelMembers.length}/{channelLimit}\n              </h2>\n              <div className=\"overflow-auto h-[40vh]\">\n                {members.map((member, index) => (\n                  <div key={index} className=\"flex items-center\">\n                    <div className=\"bg-primaryBlue w-11 h-11 border-[1px] border-goldenOrange rounded-full m-2\"></div>\n                    <div className=\"text-lg text-white\">{member}</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex flex-col justify-center items-center w-full text-center\">\n            <p className=\"text-xl z-30 text-bold text-white\">\n              Remaining Session Time:\n            </p>\n            <div className=\"w-[80%] p-2 bg-goldenOrange text-white\">\n              <p className=\"text-lg \">{isChannelTime}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Scrollable Messages Section */}\n        <div className=\"overflow-y-auto mr-[17%]\">\n          {channelMessages.map((message, index) => (\n            <div key={index} className=\"flex items-start p-4 \">\n              <div className=\"flex-shrink-0 bg-sand w-11 h-11 border-[1px] border-goldenOrange rounded-full mr-3\">\n                {message.profile_path}\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-semibold truncate text-white\">\n                  {message.username}\n                </p>\n                <p className=\"text-md break-words text-white\">\n                  {message.message}\n                </p>\n              </div>\n            </div>\n          ))}\n        </div>\n      </section>\n\n      {/* Fixed Message Input Section */}\n      <div className=\"bg-yellow-400 h-screen\">\n        <div className=\"w-[65%] bottom-3 fixed ml-[18.5vw] mr-[15%]\">\n          <form className=\"bg-white rounded-2xl \">\n            <input\n              placeholder=\"Enter a Message\"\n              className=\"w-full rounded-2xl px-3  pr-8 py-1\"\n            />\n            <button\n              type=\"submit\"\n              className=\"absolute right-2 bottom-1 hover:scale-110 py-1\"\n            >\n              <IoSend height={14} className=\"text-primaryDark\" />\n            </button>\n          </form>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Messages;\n","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/SidebarMsg.jsx",["70","71","72","73"],[],"import React, { useState, useContext } from \"react\";\nimport FILO from \"../assets/FiLo_Word.svg\";\nimport Logo from \"../assets/FILO_Logo.png\";\nimport UserContext from \"./UserContext\";\n\nconst SidebarMsg = () => {\n  // const { user, dmUsers, channels } = useContext(UserContext);\n\n  return (\n    <>\n      <div className=\"w-1/6 h-screen sidebar_bg z-10 fixed\">\n        <div className=\"\">\n          <a href=\"/\" className=\"m-2 flex items-center\">\n            <img src={Logo} alt=\"logo\" width={50} className=\"mx-2\"/>\n            <img src={FILO} width={80}  />\n\n          </a>\n          {/* <a href=\"/\" className=\"pl-6\">\n            <img src={FILO} width={80}  />\n          </a> */}\n        </div>\n\n        <div className=\"flex pl-4 py-2\">\n          <div className=\"w-12 h-12 rounded-full bg-primaryBlue border-[1px] border-goldenOrange\"></div>\n          <h1 className=\"flex items-center pl-4 text-md\">Jimmy</h1>\n        </div>\n        <div>\n          <hr class=\"w-[80%] h-[1px] mx-auto my-4 bg-black border-0 rounded\" />\n        </div>\n        <div>\n          <div className=\"flex pl-4 py-2\">\n            <div className=\"w-[13rem] h-12 rounded-3xl bg-sand flex\">\n              <div className=\"flex bg-goldenOrange w-12 h-full rounded-full justify-center items-center text-3xl text-sand\">\n                #\n              </div>\n              <h1 className=\"flex items-center text-center pl-1 text-red-500 text-md\">\n                {\"<\"}CHANNEL NAME{\">\"}\n              </h1>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default SidebarMsg;\n","/Users/doniyorisamtilloev/Documents/CSE 312/FILO/src/components/Posts.jsx",["74","75","76"],[],"import React, { useState, useEffect, useContext } from \"react\";\nimport heartIcon from \"../assets/heart-regular.svg\";\nimport redHeart from \"../assets/redHeart.svg\";\n\nimport UserContext from './UserContext';\n\nconst Posts = () => {\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n  const { user, setUser } = useContext(UserContext);\n\n  const [clicked, setClicked] = useState([]);\n  const [formData, setFormData] = useState({\n    like_counts: \"\",\n  });\n  const { like_counts } = formData;\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handleLikes = async (postId, index) => {\n    const dataToSend = { postId, userId: user.username };\n\n    try {\n      await fetch(\"/post-like\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(dataToSend),\n      });\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  function handleClick(postId, index) {\n    const updatedPosts = [...posts];\n    const post = updatedPosts[index];\n\n    if (post.likers.includes(user.username)) {\n      // If the post is already liked, unlike it\n      const likerIndex = post.likers.indexOf(user.username);\n      post.likers.splice(likerIndex, 1);\n      post.like_counter--;\n    } else {\n      // If the post is not yet liked, like it\n      post.likers.push(user.username);\n      post.like_counter++;\n    }\n\n    setPosts(updatedPosts);\n    handleLikes(postId, index); // This will now just update the like status in the backend\n  }\n\n  useEffect(() => {\n    const fetchPosts = () => {\n      fetch(\"/get-posts\")\n        .then((response) => {\n          if (!response.ok) {\n            throw new Error(\n              \"Network response was not ok \" + response.statusText\n            );\n          }\n          return response.json();\n        })\n        .then((data) => {\n          setPosts(data.reverse());\n          console.log(data);\n          setClicked(new Array(data.length).fill(false));\n        })\n        .catch((error) => {\n          console.error(\n            \"There has been a problem with your fetch operation:\",\n            error\n          );\n          setError(error.toString());\n        });\n    };\n\n    fetchPosts();\n\n    const intervalId = setInterval(fetchPosts, 5000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  const isFollowing = (username) => {\n    return user.following.includes(username);\n  };\n\n  // The function to handle the follow action\n  const handleFollow = async (usernameToFollow) => {\n    // Optimistically update the local state\n    const isNowFollowing = isFollowing(usernameToFollow);\n    const updatedFollowing = isNowFollowing\n      ? user.following.filter(username => username !== usernameToFollow) // Remove the user from the following array\n      : [...user.following, usernameToFollow]; // Add the user to the following array\n  \n    setUser({\n      ...user,\n      following: updatedFollowing\n    });\n  \n    try {\n      // Perform the backend update\n      const response = await fetch(\"/follow-user\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          followers: user.username,\n          following: usernameToFollow,\n        }),\n      });\n  \n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n  \n      // No need to update the state here, as we've already done it optimistically\n  \n    } catch (error) {\n      // If the backend update fails, revert the state change\n      console.error(\"There has been a problem with your follow operation:\", error);\n      setUser(prevUser => ({\n        ...prevUser,\n        // Revert to the previous following list\n        following: isNowFollowing ? [...prevUser.following, usernameToFollow] : prevUser.following.filter(username => username !== usernameToFollow),\n      }));\n    }\n  };\n\n  return (\n    <div className=\"justify-center\">\n      {error ? (\n        <p className=\"text-red-500 text-xl\">Error: {error}</p>\n      ) : posts.length === 0 ? (\n        <div className=\"flex justify-center items-center\">\n          <p className=\"text-sand text-4xl text-center\">No posts available!</p>\n        </div>\n      ) : (\n        posts.map((post, index) => (\n          <div\n            key={index}\n            className=\"max-w-5xl mx-auto my-1 p-3 bg-post rounded-xl text-white\"\n          >\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-10 h-10 rounded-full overflow-hidden\">\n                  {post && post.profile_image && (\n                    <img\n                      src={post.profile_image}\n                      alt=\"profile\"\n                      className=\"w-full h-full object-cover cursor-pointer\"\n                    />\n                  )}\n                </div>\n                <h2 className=\"text-xl\">{post.username}</h2>\n              </div>\n              {/* If post is yourself show Follow or following*/}\n              {user && user.username !== post.username && (\n                <button\n                  onClick={() => handleFollow(post.username)}\n                  className=\"text-blue-300 text-md px-3 cursor-pointer hover:scale-110\"\n                >\n                  {isFollowing(post.username) ? \"Following\" : \"Follow\"}\n                </button>\n              )}\n            </div>\n\n            <hr className=\"my-4\" />\n            <h1 className=\"text-2xl text-sand font-bold\">{post.title}</h1>\n            <hr className=\"my-4\" />\n            {post.description && (\n              <div>\n                <p className=\"text-sand\">{post.description}</p>\n                <hr className=\"my-2\" />\n              </div>\n            )}\n\n            {post.image_path && (\n              <div>\n                 <img\n                    src={post.image_path}\n                    alt=\"profile\"\n                    className=\"h-32\"\n                  />\n                <hr className=\"my-2\" />\n              </div>\n            )}\n\n            <div className=\"mt-2 w-5 h-5 flex items-center space-x-2\">\n              {user && post.likers.includes(user.username) ? (\n                <img\n                  src={redHeart}\n                  onClick={() => handleClick(post._id, index)}\n                  alt=\"Liked\"\n                  className=\"hover:scale-110\"\n                />\n              ) : (\n                <img\n                  src={heartIcon}\n                  onClick={() => handleClick(post._id, index)}\n                  alt=\"Like\"\n                  className=\"hover:scale-110\"\n                />\n              )}\n              <span className=\"text-white\">{post.like_counter}</span>{\" \"}\n            </div>\n          </div>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Posts;",{"ruleId":"77","severity":1,"message":"78","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":12},{"ruleId":"77","severity":1,"message":"81","line":13,"column":17,"nodeType":"79","messageId":"80","endLine":13,"endColumn":24},{"ruleId":"77","severity":1,"message":"82","line":13,"column":26,"nodeType":"79","messageId":"80","endLine":13,"endColumn":34},{"ruleId":"77","severity":1,"message":"83","line":9,"column":10,"nodeType":"79","messageId":"80","endLine":9,"endColumn":19},{"ruleId":"84","severity":1,"message":"85","line":239,"column":27,"nodeType":"86","endLine":243,"endColumn":29},{"ruleId":"84","severity":1,"message":"85","line":247,"column":27,"nodeType":"86","endLine":251,"endColumn":29},{"ruleId":"77","severity":1,"message":"81","line":8,"column":17,"nodeType":"79","messageId":"80","endLine":8,"endColumn":24},{"ruleId":"77","severity":1,"message":"82","line":8,"column":26,"nodeType":"79","messageId":"80","endLine":8,"endColumn":34},{"ruleId":"77","severity":1,"message":"87","line":73,"column":11,"nodeType":"79","messageId":"80","endLine":73,"endColumn":22},{"ruleId":"77","severity":1,"message":"88","line":73,"column":33,"nodeType":"79","messageId":"80","endLine":73,"endColumn":41},{"ruleId":"77","severity":1,"message":"89","line":73,"column":43,"nodeType":"79","messageId":"80","endLine":73,"endColumn":55},{"ruleId":"77","severity":1,"message":"90","line":76,"column":9,"nodeType":"79","messageId":"80","endLine":76,"endColumn":20},{"ruleId":"77","severity":1,"message":"91","line":1,"column":17,"nodeType":"79","messageId":"80","endLine":1,"endColumn":25},{"ruleId":"77","severity":1,"message":"92","line":1,"column":27,"nodeType":"79","messageId":"80","endLine":1,"endColumn":37},{"ruleId":"77","severity":1,"message":"93","line":4,"column":8,"nodeType":"79","messageId":"80","endLine":4,"endColumn":19},{"ruleId":"94","severity":1,"message":"95","line":15,"column":13,"nodeType":"86","endLine":15,"endColumn":43},{"ruleId":"77","severity":1,"message":"96","line":12,"column":10,"nodeType":"79","messageId":"80","endLine":12,"endColumn":17},{"ruleId":"77","severity":1,"message":"97","line":16,"column":11,"nodeType":"79","messageId":"80","endLine":16,"endColumn":22},{"ruleId":"77","severity":1,"message":"98","line":17,"column":9,"nodeType":"79","messageId":"80","endLine":17,"endColumn":21},"no-unused-vars","'Logo' is defined but never used.","Identifier","unusedVar","'dmUsers' is assigned a value but never used.","'channels' is assigned a value but never used.","'isFocused' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'description' is assigned a value but never used.","'messages' is assigned a value but never used.","'member_limit' is assigned a value but never used.","'mockMembers' is assigned a value but never used.","'useState' is defined but never used.","'useContext' is defined but never used.","'UserContext' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'clicked' is assigned a value but never used.","'like_counts' is assigned a value but never used.","'handleChange' is assigned a value but never used."]